/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.BpmConfCountersignRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BpmConfCountersign extends TableImpl<BpmConfCountersignRecord> {

    private static final long serialVersionUID = -107401076;

    /**
     * The reference instance of <code>workflow.bpm_conf_countersign</code>
     */
    public static final BpmConfCountersign BPM_CONF_COUNTERSIGN = new BpmConfCountersign();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BpmConfCountersignRecord> getRecordType() {
        return BpmConfCountersignRecord.class;
    }

    /**
     * The column <code>workflow.bpm_conf_countersign.id</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.sequential</code>. 串行/并行
     */
    public final TableField<BpmConfCountersignRecord, String> SEQUENTIAL = createField("sequential", org.jooq.impl.SQLDataType.VARCHAR, this, "串行/并行");

    /**
     * The column <code>workflow.bpm_conf_countersign.participant</code>. 参与者
     */
    public final TableField<BpmConfCountersignRecord, String> PARTICIPANT = createField("participant", org.jooq.impl.SQLDataType.VARCHAR, this, "参与者");

    /**
     * The column <code>workflow.bpm_conf_countersign.type</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.rate</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> RATE = createField("rate", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.node_id</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> NODE_ID = createField("node_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.process_model_id</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> PROCESS_MODEL_ID = createField("process_model_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.status</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.node_name</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> NODE_NAME = createField("node_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_countersign.node_code</code>.
     */
    public final TableField<BpmConfCountersignRecord, String> NODE_CODE = createField("node_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.bpm_conf_countersign</code> table reference
     */
    public BpmConfCountersign() {
        this(DSL.name("bpm_conf_countersign"), null);
    }

    /**
     * Create an aliased <code>workflow.bpm_conf_countersign</code> table reference
     */
    public BpmConfCountersign(String alias) {
        this(DSL.name(alias), BPM_CONF_COUNTERSIGN);
    }

    /**
     * Create an aliased <code>workflow.bpm_conf_countersign</code> table reference
     */
    public BpmConfCountersign(Name alias) {
        this(alias, BPM_CONF_COUNTERSIGN);
    }

    private BpmConfCountersign(Name alias, Table<BpmConfCountersignRecord> aliased) {
        this(alias, aliased, null);
    }

    private BpmConfCountersign(Name alias, Table<BpmConfCountersignRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BpmConfCountersign(Table<O> child, ForeignKey<O, BpmConfCountersignRecord> key) {
        super(child, key, BPM_CONF_COUNTERSIGN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BPM_CONF_COUNTERSIGN_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BpmConfCountersignRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_BPM_CONF_COUNTERSIGN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BpmConfCountersignRecord>> getKeys() {
        return Arrays.<UniqueKey<BpmConfCountersignRecord>>asList(Keys.BPM_CONF_COUNTERSIGN_PK, Keys.SYNTHETIC_PK_BPM_CONF_COUNTERSIGN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BpmConfCountersign as(String alias) {
        return new BpmConfCountersign(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BpmConfCountersign as(Name alias) {
        return new BpmConfCountersign(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BpmConfCountersign rename(String name) {
        return new BpmConfCountersign(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BpmConfCountersign rename(Name name) {
        return new BpmConfCountersign(name, null);
    }
}
