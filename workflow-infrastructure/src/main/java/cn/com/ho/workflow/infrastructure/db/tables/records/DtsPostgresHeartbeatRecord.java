/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables.records;


import cn.com.ho.workflow.infrastructure.db.tables.DtsPostgresHeartbeat;

import java.time.OffsetDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtsPostgresHeartbeatRecord extends UpdatableRecordImpl<DtsPostgresHeartbeatRecord> implements Record6<String, Long, String, String, OffsetDateTime, Long> {

    private static final long serialVersionUID = -516657502;

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.slot_name</code>.
     */
    public void setSlotName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.slot_name</code>.
     */
    public String getSlotName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.revice_time</code>.
     */
    public void setReviceTime(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.revice_time</code>.
     */
    public Long getReviceTime() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.revice_lsn</code>.
     */
    public void setReviceLsn(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.revice_lsn</code>.
     */
    public String getReviceLsn() {
        return (String) get(2);
    }

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.flushed_lsn</code>.
     */
    public void setFlushedLsn(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.flushed_lsn</code>.
     */
    public String getFlushedLsn() {
        return (String) get(3);
    }

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.update_time</code>.
     */
    public void setUpdateTime(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.update_time</code>.
     */
    public OffsetDateTime getUpdateTime() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>workflow.dts_postgres_heartbeat.dts_service_time</code>.
     */
    public void setDtsServiceTime(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>workflow.dts_postgres_heartbeat.dts_service_time</code>.
     */
    public Long getDtsServiceTime() {
        return (Long) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, Long, String, String, OffsetDateTime, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, Long, String, String, OffsetDateTime, Long> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.SLOT_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.REVICE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.REVICE_LSN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.FLUSHED_LSN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<OffsetDateTime> field5() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.UPDATE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT.DTS_SERVICE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getSlotName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getReviceTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getReviceLsn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getFlushedLsn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OffsetDateTime component5() {
        return getUpdateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getDtsServiceTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getSlotName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getReviceTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getReviceLsn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getFlushedLsn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OffsetDateTime value5() {
        return getUpdateTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getDtsServiceTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value1(String value) {
        setSlotName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value2(Long value) {
        setReviceTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value3(String value) {
        setReviceLsn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value4(String value) {
        setFlushedLsn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value5(OffsetDateTime value) {
        setUpdateTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord value6(Long value) {
        setDtsServiceTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeatRecord values(String value1, Long value2, String value3, String value4, OffsetDateTime value5, Long value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DtsPostgresHeartbeatRecord
     */
    public DtsPostgresHeartbeatRecord() {
        super(DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT);
    }

    /**
     * Create a detached, initialised DtsPostgresHeartbeatRecord
     */
    public DtsPostgresHeartbeatRecord(String slotName, Long reviceTime, String reviceLsn, String flushedLsn, OffsetDateTime updateTime, Long dtsServiceTime) {
        super(DtsPostgresHeartbeat.DTS_POSTGRES_HEARTBEAT);

        set(0, slotName);
        set(1, reviceTime);
        set(2, reviceLsn);
        set(3, flushedLsn);
        set(4, updateTime);
        set(5, dtsServiceTime);
    }
}
