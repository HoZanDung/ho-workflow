/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.TaskDefRuleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDefRule extends TableImpl<TaskDefRuleRecord> {

    private static final long serialVersionUID = 1968362063;

    /**
     * The reference instance of <code>workflow.task_def_rule</code>
     */
    public static final TaskDefRule TASK_DEF_RULE = new TaskDefRule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskDefRuleRecord> getRecordType() {
        return TaskDefRuleRecord.class;
    }

    /**
     * The column <code>workflow.task_def_rule.id</code>.
     */
    public final TableField<TaskDefRuleRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.task_def_rule.value</code>.
     */
    public final TableField<TaskDefRuleRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.status</code>.
     */
    public final TableField<TaskDefRuleRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_rule.node_code</code>.
     */
    public final TableField<TaskDefRuleRecord, String> NODE_CODE = createField("node_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.process_definition_id</code>.
     */
    public final TableField<TaskDefRuleRecord, String> PROCESS_DEFINITION_ID = createField("process_definition_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.base_id</code>.
     */
    public final TableField<TaskDefRuleRecord, String> BASE_ID = createField("base_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.create_time</code>.
     */
    public final TableField<TaskDefRuleRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_rule.update_time</code>.
     */
    public final TableField<TaskDefRuleRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_rule.create_by</code>.
     */
    public final TableField<TaskDefRuleRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.update_by</code>.
     */
    public final TableField<TaskDefRuleRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_rule.node_name</code>.
     */
    public final TableField<TaskDefRuleRecord, String> NODE_NAME = createField("node_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.task_def_rule</code> table reference
     */
    public TaskDefRule() {
        this(DSL.name("task_def_rule"), null);
    }

    /**
     * Create an aliased <code>workflow.task_def_rule</code> table reference
     */
    public TaskDefRule(String alias) {
        this(DSL.name(alias), TASK_DEF_RULE);
    }

    /**
     * Create an aliased <code>workflow.task_def_rule</code> table reference
     */
    public TaskDefRule(Name alias) {
        this(alias, TASK_DEF_RULE);
    }

    private TaskDefRule(Name alias, Table<TaskDefRuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskDefRule(Name alias, Table<TaskDefRuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TaskDefRule(Table<O> child, ForeignKey<O, TaskDefRuleRecord> key) {
        super(child, key, TASK_DEF_RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_DEF_RULE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskDefRuleRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_TASK_DEF_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskDefRuleRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskDefRuleRecord>>asList(Keys.TASK_DEF_RULE_PK, Keys.SYNTHETIC_PK_TASK_DEF_RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefRule as(String alias) {
        return new TaskDefRule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefRule as(Name alias) {
        return new TaskDefRule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefRule rename(String name) {
        return new TaskDefRule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefRule rename(Name name) {
        return new TaskDefRule(name, null);
    }
}
