/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.TaskDefUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDefUser extends TableImpl<TaskDefUserRecord> {

    private static final long serialVersionUID = 40224443;

    /**
     * The reference instance of <code>workflow.task_def_user</code>
     */
    public static final TaskDefUser TASK_DEF_USER = new TaskDefUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskDefUserRecord> getRecordType() {
        return TaskDefUserRecord.class;
    }

    /**
     * The column <code>workflow.task_def_user.id</code>.
     */
    public final TableField<TaskDefUserRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.task_def_user.value</code>.
     */
    public final TableField<TaskDefUserRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.type</code>.
     */
    public final TableField<TaskDefUserRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.catalog</code>.
     */
    public final TableField<TaskDefUserRecord, String> CATALOG = createField("catalog", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.base_id</code>.
     */
    public final TableField<TaskDefUserRecord, String> BASE_ID = createField("base_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.process_definition_id</code>.
     */
    public final TableField<TaskDefUserRecord, String> PROCESS_DEFINITION_ID = createField("process_definition_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.status</code>.
     */
    public final TableField<TaskDefUserRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_user.node_code</code>.
     */
    public final TableField<TaskDefUserRecord, String> NODE_CODE = createField("node_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.create_time</code>.
     */
    public final TableField<TaskDefUserRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_user.update_time</code>.
     */
    public final TableField<TaskDefUserRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_user.create_by</code>.
     */
    public final TableField<TaskDefUserRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.update_by</code>.
     */
    public final TableField<TaskDefUserRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.expr_user</code>.
     */
    public final TableField<TaskDefUserRecord, String> EXPR_USER = createField("expr_user", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.is_depart</code>.
     */
    public final TableField<TaskDefUserRecord, String> IS_DEPART = createField("is_depart", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_user.node_name</code>.
     */
    public final TableField<TaskDefUserRecord, String> NODE_NAME = createField("node_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.priority</code>.
     */
    public final TableField<TaskDefUserRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>workflow.task_def_user.depart_level</code>.
     */
    public final TableField<TaskDefUserRecord, String> DEPART_LEVEL = createField("depart_level", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.val_cn</code>.
     */
    public final TableField<TaskDefUserRecord, String> VAL_CN = createField("val_cn", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_user.value_text</code>.
     */
    public final TableField<TaskDefUserRecord, String> VALUE_TEXT = createField("value_text", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.task_def_user</code> table reference
     */
    public TaskDefUser() {
        this(DSL.name("task_def_user"), null);
    }

    /**
     * Create an aliased <code>workflow.task_def_user</code> table reference
     */
    public TaskDefUser(String alias) {
        this(DSL.name(alias), TASK_DEF_USER);
    }

    /**
     * Create an aliased <code>workflow.task_def_user</code> table reference
     */
    public TaskDefUser(Name alias) {
        this(alias, TASK_DEF_USER);
    }

    private TaskDefUser(Name alias, Table<TaskDefUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskDefUser(Name alias, Table<TaskDefUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TaskDefUser(Table<O> child, ForeignKey<O, TaskDefUserRecord> key) {
        super(child, key, TASK_DEF_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_DEF_USER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskDefUserRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_TASK_DEF_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskDefUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskDefUserRecord>>asList(Keys.TASK_DEF_USER_PK, Keys.SYNTHETIC_PK_TASK_DEF_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefUser as(String alias) {
        return new TaskDefUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefUser as(Name alias) {
        return new TaskDefUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefUser rename(String name) {
        return new TaskDefUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefUser rename(Name name) {
        return new TaskDefUser(name, null);
    }
}
