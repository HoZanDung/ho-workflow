/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.TaskDefBaseRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDefBase extends TableImpl<TaskDefBaseRecord> {

    private static final long serialVersionUID = -810679775;

    /**
     * The reference instance of <code>workflow.task_def_base</code>
     */
    public static final TaskDefBase TASK_DEF_BASE = new TaskDefBase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskDefBaseRecord> getRecordType() {
        return TaskDefBaseRecord.class;
    }

    /**
     * The column <code>workflow.task_def_base.id</code>.
     */
    public final TableField<TaskDefBaseRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.task_def_base.code</code>.
     */
    public final TableField<TaskDefBaseRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.name</code>.
     */
    public final TableField<TaskDefBaseRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.process_definition_id</code>.
     */
    public final TableField<TaskDefBaseRecord, String> PROCESS_DEFINITION_ID = createField("process_definition_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.status</code>.
     */
    public final TableField<TaskDefBaseRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_base.skip</code>.
     */
    public final TableField<TaskDefBaseRecord, String> SKIP = createField("skip", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_base.countersign_rate</code>.
     */
    public final TableField<TaskDefBaseRecord, Integer> COUNTERSIGN_RATE = createField("countersign_rate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>workflow.task_def_base.countersign_strategy</code>.
     */
    public final TableField<TaskDefBaseRecord, String> COUNTERSIGN_STRATEGY = createField("countersign_strategy", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.countersign_user</code>.
     */
    public final TableField<TaskDefBaseRecord, String> COUNTERSIGN_USER = createField("countersign_user", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.countersign_type</code>.
     */
    public final TableField<TaskDefBaseRecord, String> COUNTERSIGN_TYPE = createField("countersign_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.assign_strategy</code>.
     */
    public final TableField<TaskDefBaseRecord, String> ASSIGN_STRATEGY = createField("assign_strategy", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.create_time</code>.
     */
    public final TableField<TaskDefBaseRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_base.update_time</code>.
     */
    public final TableField<TaskDefBaseRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.task_def_base.create_by</code>.
     */
    public final TableField<TaskDefBaseRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.update_by</code>.
     */
    public final TableField<TaskDefBaseRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.task_def_base.use_dept_role</code>.
     */
    public final TableField<TaskDefBaseRecord, String> USE_DEPT_ROLE = createField("use_dept_role", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_base.grab_order</code>.
     */
    public final TableField<TaskDefBaseRecord, String> GRAB_ORDER = createField("grab_order", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow.task_def_base.skip_node_expr</code>.
     */
    public final TableField<TaskDefBaseRecord, String> SKIP_NODE_EXPR = createField("skip_node_expr", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.task_def_base</code> table reference
     */
    public TaskDefBase() {
        this(DSL.name("task_def_base"), null);
    }

    /**
     * Create an aliased <code>workflow.task_def_base</code> table reference
     */
    public TaskDefBase(String alias) {
        this(DSL.name(alias), TASK_DEF_BASE);
    }

    /**
     * Create an aliased <code>workflow.task_def_base</code> table reference
     */
    public TaskDefBase(Name alias) {
        this(alias, TASK_DEF_BASE);
    }

    private TaskDefBase(Name alias, Table<TaskDefBaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskDefBase(Name alias, Table<TaskDefBaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TaskDefBase(Table<O> child, ForeignKey<O, TaskDefBaseRecord> key) {
        super(child, key, TASK_DEF_BASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_DEF_BASE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskDefBaseRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_TASK_DEF_BASE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskDefBaseRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskDefBaseRecord>>asList(Keys.TASK_DEF_BASE_PK, Keys.SYNTHETIC_PK_TASK_DEF_BASE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefBase as(String alias) {
        return new TaskDefBase(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskDefBase as(Name alias) {
        return new TaskDefBase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefBase rename(String name) {
        return new TaskDefBase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskDefBase rename(Name name) {
        return new TaskDefBase(name, null);
    }
}
