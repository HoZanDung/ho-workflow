/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.BpmConfNoticeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 流程模型设置通知
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BpmConfNotice extends TableImpl<BpmConfNoticeRecord> {

    private static final long serialVersionUID = -1515540502;

    /**
     * The reference instance of <code>workflow.bpm_conf_notice</code>
     */
    public static final BpmConfNotice BPM_CONF_NOTICE = new BpmConfNotice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BpmConfNoticeRecord> getRecordType() {
        return BpmConfNoticeRecord.class;
    }

    /**
     * The column <code>workflow.bpm_conf_notice.id</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.type</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.receiver</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> RECEIVER = createField("receiver", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.due_date</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> DUE_DATE = createField("due_date", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.node_id</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> NODE_ID = createField("node_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.template_id</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> TEMPLATE_ID = createField("template_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.template_code</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> TEMPLATE_CODE = createField("template_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.notification_type</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> NOTIFICATION_TYPE = createField("notification_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.process_model_id</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> PROCESS_MODEL_ID = createField("process_model_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.status</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.create_time</code>.
     */
    public final TableField<BpmConfNoticeRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.update_time</code>.
     */
    public final TableField<BpmConfNoticeRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.create_by</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.update_by</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.node_name</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> NODE_NAME = createField("node_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.bpm_conf_notice.node_code</code>.
     */
    public final TableField<BpmConfNoticeRecord, String> NODE_CODE = createField("node_code", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.bpm_conf_notice</code> table reference
     */
    public BpmConfNotice() {
        this(DSL.name("bpm_conf_notice"), null);
    }

    /**
     * Create an aliased <code>workflow.bpm_conf_notice</code> table reference
     */
    public BpmConfNotice(String alias) {
        this(DSL.name(alias), BPM_CONF_NOTICE);
    }

    /**
     * Create an aliased <code>workflow.bpm_conf_notice</code> table reference
     */
    public BpmConfNotice(Name alias) {
        this(alias, BPM_CONF_NOTICE);
    }

    private BpmConfNotice(Name alias, Table<BpmConfNoticeRecord> aliased) {
        this(alias, aliased, null);
    }

    private BpmConfNotice(Name alias, Table<BpmConfNoticeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("流程模型设置通知"));
    }

    public <O extends Record> BpmConfNotice(Table<O> child, ForeignKey<O, BpmConfNoticeRecord> key) {
        super(child, key, BPM_CONF_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BPM_CONF_NOTICE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BpmConfNoticeRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_BPM_CONF_NOTICE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BpmConfNoticeRecord>> getKeys() {
        return Arrays.<UniqueKey<BpmConfNoticeRecord>>asList(Keys.BPM_CONF_NOTICE_PK, Keys.SYNTHETIC_PK_BPM_CONF_NOTICE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BpmConfNotice as(String alias) {
        return new BpmConfNotice(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BpmConfNotice as(Name alias) {
        return new BpmConfNotice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BpmConfNotice rename(String name) {
        return new BpmConfNotice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BpmConfNotice rename(Name name) {
        return new BpmConfNotice(name, null);
    }
}
