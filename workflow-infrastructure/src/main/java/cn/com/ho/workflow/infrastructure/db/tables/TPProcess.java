/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.TPProcessRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TPProcess extends TableImpl<TPProcessRecord> {

    private static final long serialVersionUID = -168368787;

    /**
     * The reference instance of <code>workflow.t_p_process</code>
     */
    public static final TPProcess T_P_PROCESS = new TPProcess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TPProcessRecord> getRecordType() {
        return TPProcessRecord.class;
    }

    /**
     * The column <code>workflow.t_p_process.id</code>.
     */
    public final TableField<TPProcessRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>workflow.t_p_process.name</code>.
     */
    public final TableField<TPProcessRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.status</code>.
     */
    public final TableField<TPProcessRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.process_xml</code>.
     */
    public final TableField<TPProcessRecord, String> PROCESS_XML = createField("process_xml", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.t_p_process.bus_table</code>.
     */
    public final TableField<TPProcessRecord, String> BUS_TABLE = createField("bus_table", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.bpmn_xml</code>.
     */
    public final TableField<TPProcessRecord, String> BPMN_XML = createField("bpmn_xml", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.t_p_process.create_time</code>.
     */
    public final TableField<TPProcessRecord, LocalDateTime> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.t_p_process.create_by</code>.
     */
    public final TableField<TPProcessRecord, String> CREATE_BY = createField("create_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.update_time</code>.
     */
    public final TableField<TPProcessRecord, LocalDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>workflow.t_p_process.update_by</code>.
     */
    public final TableField<TPProcessRecord, String> UPDATE_BY = createField("update_by", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.remark</code>.
     */
    public final TableField<TPProcessRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.process_key</code>.
     */
    public final TableField<TPProcessRecord, String> PROCESS_KEY = createField("process_key", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>workflow.t_p_process.model_id</code>.
     */
    public final TableField<TPProcessRecord, String> MODEL_ID = createField("model_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>workflow.t_p_process</code> table reference
     */
    public TPProcess() {
        this(DSL.name("t_p_process"), null);
    }

    /**
     * Create an aliased <code>workflow.t_p_process</code> table reference
     */
    public TPProcess(String alias) {
        this(DSL.name(alias), T_P_PROCESS);
    }

    /**
     * Create an aliased <code>workflow.t_p_process</code> table reference
     */
    public TPProcess(Name alias) {
        this(alias, T_P_PROCESS);
    }

    private TPProcess(Name alias, Table<TPProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private TPProcess(Name alias, Table<TPProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TPProcess(Table<O> child, ForeignKey<O, TPProcessRecord> key) {
        super(child, key, T_P_PROCESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_P_PROCESS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TPProcessRecord> getPrimaryKey() {
        return Keys.SYNTHETIC_PK_T_P_PROCESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TPProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<TPProcessRecord>>asList(Keys.T_P_PROCESS_PK, Keys.SYNTHETIC_PK_T_P_PROCESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TPProcess as(String alias) {
        return new TPProcess(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TPProcess as(Name alias) {
        return new TPProcess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TPProcess rename(String name) {
        return new TPProcess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TPProcess rename(Name name) {
        return new TPProcess(name, null);
    }
}
