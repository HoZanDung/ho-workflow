/*
 * This file is generated by jOOQ.
 */
package cn.com.ho.workflow.infrastructure.db.tables;


import cn.com.ho.workflow.infrastructure.db.Indexes;
import cn.com.ho.workflow.infrastructure.db.Keys;
import cn.com.ho.workflow.infrastructure.db.Workflow;
import cn.com.ho.workflow.infrastructure.db.tables.records.DtsPostgresHeartbeatRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DtsPostgresHeartbeat extends TableImpl<DtsPostgresHeartbeatRecord> {

    private static final long serialVersionUID = 605456112;

    /**
     * The reference instance of <code>workflow.dts_postgres_heartbeat</code>
     */
    public static final DtsPostgresHeartbeat DTS_POSTGRES_HEARTBEAT = new DtsPostgresHeartbeat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DtsPostgresHeartbeatRecord> getRecordType() {
        return DtsPostgresHeartbeatRecord.class;
    }

    /**
     * The column <code>workflow.dts_postgres_heartbeat.slot_name</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, String> SLOT_NAME = createField("slot_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>workflow.dts_postgres_heartbeat.revice_time</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, Long> REVICE_TIME = createField("revice_time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>workflow.dts_postgres_heartbeat.revice_lsn</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, String> REVICE_LSN = createField("revice_lsn", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>workflow.dts_postgres_heartbeat.flushed_lsn</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, String> FLUSHED_LSN = createField("flushed_lsn", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>workflow.dts_postgres_heartbeat.update_time</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, OffsetDateTime> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>workflow.dts_postgres_heartbeat.dts_service_time</code>.
     */
    public final TableField<DtsPostgresHeartbeatRecord, Long> DTS_SERVICE_TIME = createField("dts_service_time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>workflow.dts_postgres_heartbeat</code> table reference
     */
    public DtsPostgresHeartbeat() {
        this(DSL.name("dts_postgres_heartbeat"), null);
    }

    /**
     * Create an aliased <code>workflow.dts_postgres_heartbeat</code> table reference
     */
    public DtsPostgresHeartbeat(String alias) {
        this(DSL.name(alias), DTS_POSTGRES_HEARTBEAT);
    }

    /**
     * Create an aliased <code>workflow.dts_postgres_heartbeat</code> table reference
     */
    public DtsPostgresHeartbeat(Name alias) {
        this(alias, DTS_POSTGRES_HEARTBEAT);
    }

    private DtsPostgresHeartbeat(Name alias, Table<DtsPostgresHeartbeatRecord> aliased) {
        this(alias, aliased, null);
    }

    private DtsPostgresHeartbeat(Name alias, Table<DtsPostgresHeartbeatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DtsPostgresHeartbeat(Table<O> child, ForeignKey<O, DtsPostgresHeartbeatRecord> key) {
        super(child, key, DTS_POSTGRES_HEARTBEAT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DTS_POSTGRES_HEARTBEAT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DtsPostgresHeartbeatRecord> getPrimaryKey() {
        return Keys.DTS_POSTGRES_HEARTBEAT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DtsPostgresHeartbeatRecord>> getKeys() {
        return Arrays.<UniqueKey<DtsPostgresHeartbeatRecord>>asList(Keys.DTS_POSTGRES_HEARTBEAT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeat as(String alias) {
        return new DtsPostgresHeartbeat(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DtsPostgresHeartbeat as(Name alias) {
        return new DtsPostgresHeartbeat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DtsPostgresHeartbeat rename(String name) {
        return new DtsPostgresHeartbeat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DtsPostgresHeartbeat rename(Name name) {
        return new DtsPostgresHeartbeat(name, null);
    }
}
